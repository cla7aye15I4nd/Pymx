/*
Test Package: Codegen
Author: Zheng Yu
Input:
=== input ===
666 666
3 1 7 4 8 1 8 6 7 3 2 6 9 4 1 0 7 7 7 6 9 8 5 1 5 4 0 0 4 3 9 3 6 7 8 7 9 3 7 2 9 1 6 3 1 0 5 5 7 4 8 4 3 9 6 8 4 9 4 5 5 9 3 4 1 7 8 8 6 1 8 2 2 5 0 6 9 0 0 0 1 0 3 2 6 1 1 4 6 2 0 2 3 7 1 0 7 7 4 8 4 6 0 9 1 0 1 1 7 0 4 1 5 3 2 0 0 1 2 4 5 4 1 0 0 7 8 9 9 2 9 1 4 4 7 4 8 8 3 6 8 1 8 9 6 3 0 8 7 4 9 0 2 1 2 3 6 5 0 6 3 7 9 0 1 6 0 9 5 9 2 4 1 1 8 0 1 1 0 1 0 2 0 7 8 4 3 3 5 9 6 6 0 6 0 5 9 3 3 6 0 1 1 9 8 0 0 4 3 5 9 0 4 0 3 9 7 0 9 6 5 0 7 2 1 8 4 7 9 4 2 5 3 1 7 3 2 4 5 6 9 0 2 3 5 2 1 6 7 4 9 0 9 1 5 4 5 2 8 9 9 0 6 3 8 9 8 0 0 1 2 7 4 6 4 5 2 9 6 1 7 5 0 7 8 1 1 1 0 5 2 1 7 4 7 9 7 4 3 5 5 0 5 7 5 2 6 3 3 5 0 3 1 2 5 2 9 9 9 5 8 9 0 7 8 5 2 6 4 3 6 0 3 4 7 1 3 8 1 0 3 6 5 9 6 0 1 2 9 7 2 7 2 3 0 4 2 4 8 4 7 7 9 6 2 2 7 8 6 0 3 9 9 2 3 8 3 7 1 6 3 9 8 9 9 8 3 4 2 0 8 3 4 8 7 1 0 0 5 2 3 6 0 7 3 4 2 5 9 6 1 5 5 0 7 1 3 8 9 3 5 3 2 2 8 4 7 3 0 3 1 6 4 4 8 0 7 6 4 3 8 2 3 4 7 4 8 2 8 9 0 2 9 6 5 0 6 1 9 7 6 3 3 2 2 3 0 4 2 3 7 9 2 7 6 3 9 2 8 5 2 5 8 5 0 4 8 3 6 8 5 1 1 1 8 8 3 6 5 4 1 9 6 8 3 1 8 9 4 5 2 2 9 5 5 7 7 4 8 4 2 6 6 2 8 0 3 1 8 7 8 8 4 0 7 1 3 9 5 9 0 3 3 3 9 6 8 9 4 0 9 2 2 4 6 3 3 2 6 7 4 5 5 7 8 7 2 1 0 9 1 8 0 6 6 6 8 8 3 4 1 8 4 2 4 4 7 5 0 2 2 9 8 8 9 7 8 3 0 8 7 4 2 6 2 8 2 1 4 8 1 7 0 5 0 9 8 7 1 6 9 8 0 2 2 2 3 1 7 8 4 6 4 5 3 2 8 4 4 5 1 0 6 0 5 5 9 5 0 4 0 8 8 2 5 3 3 0 4 5 2 6 4 4 0 2 5
1 9 2 1 4 2 0 3 5 9 5 7 6 7 8 9 7 2 3 6 6 0 1 1 4 3 9 5 5 3 6 3 8 9 0 1 8 4 4 6 0 5 1 6 4 1 3 1 4 2 8 7 9 3 2 7 8 0 2 8 5 7 8 2 5 6 8 9 7 5 9 3 5 5 0 6 6 4 7 4 4 7 2 2 2 8 0 2 2 8 8 6 0 3 2 1 1 3 3 9 0 5 8 7 9 9 1 9 4 6 8 3 4 7 3 9 9 9 6 1 5 0 5 8 0 4 3 6 2 8 5 2 2 0 0 3 8 6 5 5 7 8 4 4 3 0 1 8 3 6 2 4 6 2 5 5 3 9 9 8 1 9 8 8 6 6 5 9 2 8 1 4 7 4 2 2 8 7 6 0 9 8 5 3 1 2 2 6 0 7 5 3 7 1 7 7 3 1 9 0 5 5 2 8 6 8 8 5 3 4 1 5 4 1 5 7 2 5 7 3 9 6 9 0 4 6 6 5 5 3 8 9 9 5 9 0 3 7 0 0 1 0 2 7 0 7 1 1 2 3 5 6 7 3 5 8 2 6 7 0 1 0 7 5 0 4 5 3 2 5 9 7 1 1 9 6 4 3 2 6 3 7 5 5 6 2 5 3 5 5 9 8 4 5 9 6 1 8 5 2 0 2 9 0 4 0 3 9 4 4 8 3 9 5 9 2 6 1 5 1 7 7 1 1 1 2 7 8 6 9 9 2 2 2 7 8 4 9 4 6 4 7 9 2 5 5 0 3 6 2 7 5 0 8 4 9 8 7 6 6 8 7 9 1 7 4 1 7 2 8 1 3 6 6 0 7 9 2 9 8 8 1 4 1 5 1 0 9 0 1 5 9 3 2 0 9 1 9 3 1 4 9 4 1 7 2 3 5 0 5 8 2 1 3 3 0 8 8 1 5 9 4 7 2 4 3 0 4 1 1 8 2 6 1 5 7 8 3 6 2 0 3 0 9 1 3 0 9 6 0 8 9 2 1 8 6 9 0 7 5 3 8 4 7 0 3 4 2 2 7 0 4 1 8 0 5 5 5 0 0 6 0 4 2 4 0 5 4 7 3 0 1 6 2 4 1 6 3 2 7 7 6 6 2 7 7 5 1 5 1 3 3 4 6 6 8 8 4 0 3 1 3 0 9 3 4 7 0 8 2 6 6 2 3 0 2 9 7 1 9 4 6 0 0 2 3 4 0 2 9 4 1 9 0 3 7 1 4 8 5 7 5 0 0 9 9 9 4 5 7 6 7 9 6 6 8 5 5 9 5 9 9 3 1 0 3 2 1 8 3 8 9 0 1 8 3 9 5 3 5 1 4 8 6 7 1 9 7 3 2 0 8 5 1 1 2 8 8 3 2 8 9 2 8 2 8 6 0 6 8 9 3 6 0 0 6 2 8 3 3 0 8 4 8 2 6 3 4 4 5 9 6 2 2 0 6 5 9 8 7 4 7 5 0 2 8 4

=== end ===
Output:
=== output ===
7628
=== end ===
ExitCode: 0
InstLimit: -1
*/

int P = 998244353;
int G = 3;

int maxN = 262145;
int n;
int m;
int S;
int L;
int invN;

int i, j, k;
int [] a;
int [] b;
int [] c;
int [] wn;
int [] rev;


int fast_mul(int x, int d) {
  int ret = 0;
  while (d > 0) {
    if ((d & 1) == 1)
      ret = (ret + x) % P;
    d = d >> 1;
    x = (x + x) % P;
  }
  return ret;
}

int fast_pow(int x, int d) {
  int ret = 1;
  while (d > 0) {
    if ((d & 1) == 1)
      ret = fast_mul(ret, x);
    d = d >> 1;
    x = fast_mul(x, x);
  }
  return ret;
}

int init(int n) {
  a = new int [maxN];
  b = new int [maxN];
  c = new int [maxN];
  wn = new int [maxN];
  rev = new int [maxN];
  
  L = 1;
  S = 0;
  for (; L <= n; ) { L = L << 1; ++S; }
  
  for (i = 1; i < L; ++i)
    rev[i] = (rev[i >> 1] >> 1) | ((i & 1) << (S - 1));
  
  wn[0] = 1;
  wn[1] = fast_pow(G, (P - 1) / L);
  for (i = 2; i <= L; ++i)
    wn[i] = fast_mul(wn[i - 1], wn[1]);
  invN = fast_pow(L, P - 2);
}

void dft(int []a,int tp) {
  for (i = 0; i < L; ++i)
    if (i < rev[i]) {
      int tmp = a[i];
      a[i] = a[rev[i]];
      a[rev[i]] = tmp;
    }

  for (k = 1; k < L; k = k << 1) {
    int k2 = k << 1;
    for (i = 0; i < L; i = i + k2)
      for (j = 0; j < k; ++j) {
	      int x = a[i + j];
	      int y = a[i + j + k];
        if (tp > 0) 
          y = fast_mul(y, wn[L / k2 * j]);
        else
          y = fast_mul(y, wn[L - L / k2 * j]);
        a[i + j] = (x + y) % P;
        a[i + j + k] = (x - y + P) % P;
      }
  }

  if (tp < 0)
    for (i = 0; i < L; ++i) a[i] = fast_mul(a[i], invN);
}
 
int main() {
  n = getInt();
  m = getInt();

  init(n + m);
  for (i = 0; i <= n; ++i)
    a[i] = getInt();
  for (i = 0; i <= m; ++i)
    b[i] = getInt();

  dft(a, 1);
  dft(b, 1);

  for (i = 0; i < L; ++i)
    c[i] = fast_mul(a[i], b[i]);

  dft(c, -1);

  int res = 0;
  for (i = 0; i <= n + m; ++i)
      res = res ^ c[i];
      
  print(toString(res));

  return 0;
}
 
